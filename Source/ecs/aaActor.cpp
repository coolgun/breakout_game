// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com
#include "aaActor.h"
#include "aaComponent.h"
#include "aaContainer.h"

///-------------------------------------------------------------------------
using namespace ecs;
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
///
///
/// Constructor
///
///
///-------------------------------------------------------------------------
AActor::AActor() noexcept
{


}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
///
///
/// Destructor
///
///
///-------------------------------------------------------------------------
AActor::~AActor()
{
    clear();
    sys::caching_system::cleanup(this);
}
///-------------------------------------------------------------------------








///------------------------------------------------------------------------
///
///
///
/// 
///
///
///-------------------------------------------------------------------------
AContainer* AActor::getContainer()const noexcept
{
    return mParentContainer;
}
///-------------------------------------------------------------------------







 ///------------------------------------------------------------------------
///
///
///
/// проверка является ли присоеденненым в контейнер
///
///
///-------------------------------------------------------------------------
bool AActor::isContainer()const
{
    return mParentContainer != nullptr;
}
///-------------------------------------------------------------------------




 ///------------------------------------------------------------------------
///
///
///
/// доавляем себя в контейнера
///
///
///-------------------------------------------------------------------------
void AActor::assignContainer(AContainer *container)
{
    mParentContainer = container;
    for (const auto &component : mComponents)
    {
        component->assignContainer();
    }
}
///-------------------------------------------------------------------------






 ///------------------------------------------------------------------------
///
///
///
/// удаляем себя в контейнера
///
///
///-------------------------------------------------------------------------
void AActor::rejectContainer()
{
    for (const auto &component : mComponents)
    {
        component->rejectContainer();
    }
    mParentContainer = nullptr;
}
///-------------------------------------------------------------------------








 ///------------------------------------------------------------------------
///
///
///
/// добавление компонента
///
///
///-------------------------------------------------------------------------
void AActor::append(const std::shared_ptr<AComponent> &component)
{
    if (!component)
    {
        return;
    }

	component->setActor(weak_from_this());
	mComponents.push_back(component);


    sys::caching_system::cleanup(this);
    if (mParentContainer)
    {
        mParentContainer->cleanup();
    }
    
    for (const auto &component : mComponents)
    {
        component->changeComponents();
    }
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
///
///
/// удаление компонента
///
///
///-------------------------------------------------------------------------
void AActor::remove(const std::shared_ptr<AComponent> &component)
{
	component->setActor(PActor());
	const auto item = std::find(mComponents.cbegin(), mComponents.cend(), component);
	if (item != mComponents.cend())
	{
		mComponents.erase(item);
	}
    sys::caching_system::cleanup(this);
    sys::caching_system::cleanup(mParentContainer);
    for (const auto &component : mComponents)
    {
        component->changeComponents();
    }
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
///
///
/// полностью все почистить
///
///
///-------------------------------------------------------------------------
void AActor::clear()
{
    while (!mComponents.empty())
    {
        remove(mComponents.back());
    }
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
///
///
/// проверка, пустой актор или нет
///
///
///-------------------------------------------------------------------------
bool AActor::isEmpty() const
{
    return mComponents.empty();
}
///-------------------------------------------------------------------------




