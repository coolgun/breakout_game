// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com
#include "Component_Sprite.h"
#include "Device.h"




///-------------------------------------------------------------------------
using namespace game;
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
///
///
/// Constructor
///
///
///-------------------------------------------------------------------------
AComponentSprite::AComponentSprite(const std::string &name, const int tag, const int depth)
    :
        super(depth),
        mTag(tag)
{
    mSprite = dm::loadSprite(name);
    const auto rect = mSprite.getTextureRect();
    mSprite.setOrigin(rect.width * 0.5f, rect.height * 0.5f);
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
///
///
/// Destructor
///
///
///-------------------------------------------------------------------------
AComponentSprite::~AComponentSprite()
{


}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
/// <summary>
/// возвратим текущую текстуру
/// </summary>
///
///-------------------------------------------------------------------------
void AComponentSprite:: draw(dm::ARender &render)
{
    render.render(mSprite);
}
///-------------------------------------------------------------------------







 ///------------------------------------------------------------------------
///
/// <summary>
/// размер спрайта в пикселях
/// </summary>
///
///-------------------------------------------------------------------------
int AComponentSprite:: width() const
{
    return mSprite.getTextureRect().width;// * mSprite.getScale().x;
}
///-------------------------------------------------------------------------



 ///------------------------------------------------------------------------
///
/// <summary>
/// размер спрайта в пикселях
/// </summary>
///
///-------------------------------------------------------------------------
int AComponentSprite::height() const
{
    return mSprite.getTextureRect().height;// * mSprite.getScale().y;

}
///-------------------------------------------------------------------------






 ///------------------------------------------------------------------------
///
/// <summary>
/// масштаб спрайта
/// </summary>
///
///-------------------------------------------------------------------------
void AComponentSprite :: setScale(const float scale)
{
    mSprite.setScale(scale, scale);
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
/// <summary>
/// возвратим тег спрайта
/// </summary>
///
///-------------------------------------------------------------------------
int AComponentSprite :: tag() const
{
    return mTag;
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
/// <summary>
/// установка позиции
/// </summary>
///
///-------------------------------------------------------------------------
void AComponentSprite :: setPosition(const FPoint &position)
{
    mSprite.setPosition(position.x, position.y);
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
/// <summary>
/// масштаб спрайта
/// </summary>
///
///-------------------------------------------------------------------------
void AComponentSprite :: setScale(const FPoint &scale)
{
    mSprite.setScale(scale.x, scale.y);
}
///-------------------------------------------------------------------------







 ///------------------------------------------------------------------------
///
/// <summary>
/// размер спрайта
/// </summary>
///
///-------------------------------------------------------------------------
FPoint AComponentSprite:: size()const
{
    return { static_cast<float>(width()), static_cast<float>(height()) };
}
///-------------------------------------------------------------------------






 ///------------------------------------------------------------------------
///
/// <summary>
/// установка режим отображения
/// </summary>
///
///-------------------------------------------------------------------------
void AComponentSprite :: setVisible(const bool enabled)
{
    mVisible = enabled;
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
/// <summary>
/// проверка спрайт нужно отрисовывать или нет
/// </summary>
///
///-------------------------------------------------------------------------
bool AComponentSprite :: isVisible() const
{
    return mVisible;
}
///-------------------------------------------------------------------------





 ///------------------------------------------------------------------------
///
/// <summary>
/// поворот спрайта в радианах
/// </summary>
///
///-------------------------------------------------------------------------
float AComponentSprite::angle() const
{
    return mSprite.getRotation();
}
///-------------------------------------------------------------------------



 ///------------------------------------------------------------------------
///
/// <summary>
/// установка поворота спрайта в радианах
/// </summary>
///
///-------------------------------------------------------------------------
void AComponentSprite::setAngle(const float angle)
{
    mSprite.setRotation(angle);
}
///-------------------------------------------------------------------------



